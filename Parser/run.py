#!/bin/env python3
# -*- coding: utf-8 -*-

import argparse  # https://docs.python.org/3/library/argparse.html
import configparser
import os
from timeit import default_timer as timer

from compatible import Compatible
from completeSessions import CompleteSession
from parser import Parser
from utils.functions import get_logger

config = configparser.ConfigParser()
config.sections()
config.read('settings.conf')


def CreateArgParser() -> argparse:
    """
    Metodo para establecer los argumentos que necesita la clasek

    :return:
    """
    example = "python3 %(prog)s -d /mnt/cowrie/log/ -o output/ -v"

    myParser = argparse.ArgumentParser(description='%(prog)s is a script to parse the log generated by the honeypot SSH\
 Cowrie and generate a JSON file with which to import the data into a BD NoSQL.', usage='{}'.format(example))

    requiredNamed = myParser.add_argument_group('required named arguments')
    requiredNamed.add_argument('-d', '--dir', help='Directory where the files are located.')
    myParser.add_argument('-o', '--output', help='Directory where the generated files are stored.')
    myParser.add_argument('-db', '--mmdb', help='Path where the DB is in our SO.')
    myParser.add_argument('-v', '--verbose', action='store_true', help='Verbose flag (boolean).', default=False)

    # se puede poner en la misma linea
    myParser.set_defaults(mmdb=config['DEFAULTS']['BD_GEOIP2'])
    myParser.set_defaults(output=config['DEFAULTS']['OUTPUT'])
    # myParser.print_help()
    return myParser.parse_args()


if __name__ == "__main__":
    arg = CreateArgParser()

    logger = get_logger(arg.verbose)

    logger.info('Start Parser')
    start = timer()
    parser = Parser(logger, arg.output, arg.dir, 'DEFAULTS')
    parser.parse(arg.mmdb)

    logger.info('Start Complete Sessions')
    c = CompleteSession(logger, arg.output, 'DEFAULTS')
    c.run()

    logger.info('Start JSON Compatible')
    comp = Compatible(logger, arg.output, 'DEFAULTS')
    comp.run()
    end = timer()
    logger.info('Time total: {}'.format(end - start))  # Time in seconds

    # Eliminacion de ficheros auxiliares imnecesarios
    os.remove('{}/{}'.format(arg.output, config['DEFAULTS']['FILE_LOG_COMPLETED']))
    os.remove('{}/{}'.format(arg.output, config['DEFAULTS']['FILE_LOG_SESSION']))
    os.remove('{}/{}'.format(arg.output, config['DEFAULTS']['FILE_LOG_NOSESSION']))
